#!/bin/bash
# Create Custom Partition Layout for Hardened Laptop OS
# Layout: 512MB EFI + 1GB recovery + encrypted LVM root/swap
# Part of hardened laptop OS setup - Task 3.4
# Requirements: 3.1, 3.2, 3.3, 3.4

set -euo pipefail

# Configuration
DEVICE="${1:-/dev/sda}"
EFI_SIZE="512M"
RECOVERY_SIZE="1G"

echo "=== Custom Partition Layout Setup ==="
echo "Target device: ${DEVICE}"
echo "Layout:"
echo "  - ${EFI_SIZE} EFI System Partition (FAT32)"
echo "  - ${RECOVERY_SIZE} Recovery Partition (ext4)"
echo "  - Remaining space for LUKS2 encrypted LVM"
echo

# Function to create partition layout
create_partitions() {
    local device="$1"
    
    echo "Creating partition layout on ${device}..."
    
    # Wipe existing partition table
    wipefs -af "${device}"
    
    # Create GPT partition table
    parted -s "${device}" mklabel gpt
    
    # Create EFI System Partition (512MB)
    parted -s "${device}" mkpart primary fat32 1MiB 513MiB
    parted -s "${device}" set 1 esp on
    parted -s "${device}" name 1 "EFI System"
    
    # Create Recovery Partition (1GB)
    parted -s "${device}" mkpart primary ext4 513MiB 1537MiB
    parted -s "${device}" name 2 "Recovery"
    
    # Create main partition for LUKS (remaining space)
    parted -s "${device}" mkpart primary 1537MiB 100%
    parted -s "${device}" name 3 "LUKS Container"
    
    echo "✓ Partition table created"
    
    # Wait for kernel to recognize new partitions
    partprobe "${device}"
    sleep 2
    
    # Display partition layout
    parted -s "${device}" print
}

# Function to format EFI and recovery partitions
format_boot_partitions() {
    local device="$1"
    local efi_part="${device}1"
    local recovery_part="${device}2"
    
    echo "Formatting boot partitions..."
    
    # Format EFI System Partition
    mkfs.fat -F32 -n "EFI" "${efi_part}"
    echo "✓ EFI partition formatted (FAT32)"
    
    # Format Recovery Partition
    mkfs.ext4 -L "recovery" "${recovery_part}"
    echo "✓ Recovery partition formatted (ext4)"
}

# Function to verify partition layout
verify_layout() {
    local device="$1"
    
    echo "Verifying partition layout..."
    
    # Check partition table type
    if parted -s "${device}" print | grep -q "Partition Table: gpt"; then
        echo "✓ GPT partition table confirmed"
    else
        echo "✗ ERROR: GPT partition table not found"
        return 1
    fi
    
    # Check EFI partition
    if parted -s "${device}" print | grep -q "esp"; then
        echo "✓ EFI System Partition found"
    else
        echo "✗ ERROR: EFI System Partition not properly configured"
        return 1
    fi
    
    # Check partition sizes
    local efi_size=$(lsblk -b -n -o SIZE "${device}1" | numfmt --to=iec)
    local recovery_size=$(lsblk -b -n -o SIZE "${device}2" | numfmt --to=iec)
    
    echo "✓ Partition sizes:"
    echo "  - EFI: ${efi_size}"
    echo "  - Recovery: ${recovery_size}"
    echo "  - LUKS: $(lsblk -b -n -o SIZE "${device}3" | numfmt --to=iec)"
}

# Function to create mount points and fstab entries
setup_mount_structure() {
    echo "Setting up mount point structure..."
    
    # Create mount points
    mkdir -p /mnt/hardened/{boot/efi,recovery,home}
    
    echo "✓ Mount points created:"
    echo "  - /mnt/hardened (root)"
    echo "  - /mnt/hardened/boot/efi (EFI)"
    echo "  - /mnt/hardened/recovery (recovery)"
    echo "  - /mnt/hardened/home (home)"
}

# Function to generate fstab template
generate_fstab_template() {
    local device="$1"
    
    cat > /tmp/fstab.template << EOF
# Hardened Laptop OS - fstab template
# Generated by create-partition-layout.sh

# Root filesystem (LUKS2 encrypted LVM)
/dev/mapper/hardened--vg-root /               ext4    defaults,noatime        0       1

# Home filesystem (LUKS2 encrypted LVM)  
/dev/mapper/hardened--vg-home /home           ext4    defaults,noatime        0       2

# Swap (LUKS2 encrypted LVM)
/dev/mapper/hardened--vg-swap none            swap    sw                      0       0

# EFI System Partition
UUID=$(blkid -s UUID -o value ${device}1) /boot/efi       vfat    umask=0077              0       1

# Recovery Partition
UUID=$(blkid -s UUID -o value ${device}2) /recovery       ext4    defaults,noatime        0       2

# Temporary filesystems
tmpfs                   /tmp            tmpfs   defaults,noatime,nosuid,nodev,noexec,mode=1777 0 0
tmpfs                   /var/tmp        tmpfs   defaults,noatime,nosuid,nodev,noexec,mode=1777 0 0
tmpfs                   /dev/shm        tmpfs   defaults,noatime,nosuid,nodev,noexec 0 0
EOF

    echo "✓ fstab template generated: /tmp/fstab.template"
}

# Function to generate crypttab template
generate_crypttab_template() {
    local device="$1"
    local luks_part="${device}3"
    
    cat > /tmp/crypttab.template << EOF
# Hardened Laptop OS - crypttab template
# Generated by create-partition-layout.sh

# LUKS2 encrypted container
hardened-crypt UUID=$(blkid -s UUID -o value ${luks_part}) none luks,discard
EOF

    echo "✓ crypttab template generated: /tmp/crypttab.template"
}

# Main execution
main() {
    if [[ $EUID -ne 0 ]]; then
        echo "This script must be run as root"
        exit 1
    fi
    
    if [[ ! -b "${DEVICE}" ]]; then
        echo "Error: Device ${DEVICE} not found"
        exit 1
    fi
    
    echo "WARNING: This will destroy all data on ${DEVICE}"
    echo "Press Enter to continue or Ctrl+C to abort..."
    read -r
    
    # Create partition layout
    create_partitions "${DEVICE}"
    
    # Format boot partitions
    format_boot_partitions "${DEVICE}"
    
    # Verify layout
    verify_layout "${DEVICE}"
    
    # Setup mount structure
    setup_mount_structure
    
    # Generate configuration templates
    generate_fstab_template "${DEVICE}"
    generate_crypttab_template "${DEVICE}"
    
    echo
    echo "=== Partition Layout Complete ==="
    echo "Device: ${DEVICE}"
    echo "Partitions:"
    echo "  1. ${DEVICE}1 - EFI System (${EFI_SIZE})"
    echo "  2. ${DEVICE}2 - Recovery (${RECOVERY_SIZE})"
    echo "  3. ${DEVICE}3 - LUKS Container (remaining)"
    echo
    echo "Configuration files generated:"
    echo "  - /tmp/fstab.template"
    echo "  - /tmp/crypttab.template"
    echo
    echo "Next steps:"
    echo "1. Run setup-luks2-encryption.sh ${DEVICE}3"
    echo "2. Mount filesystems and install base system"
    echo "3. Copy configuration templates to target system"
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi